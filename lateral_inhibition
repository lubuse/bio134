# -*- coding: utf-8 -*-
"""
Created on Tue Nov 29 19:51:03 2022

@author: lukas
"""
import numpy as np
import matplotlib.pyplot as plt

# ODE for Notch
def dN_dt(Dbar, N, a, k):
    d = (Dbar**k / (a + Dbar**k)) - N
    return d

# ODE for Delta
def dD_dt(D, N, b, h):
    d = (1 / (1 + b * N**h)) - D
    return d

# takes time (e.g. 50), timesteps (e.g 0.2), constants a,b,k and h
# takes ini_c, an array with format as follows, which also defines number of cells:
# ***
#       cell 1  cell 2
# Delta a       b
# Notch x       y
# ini_c = np.array([[a,b],[x,y]])
# ***
# returns 3D array of concentrations at each timestep for each cell for each compound
def model(time, timestep, ini_c, a, b, k, h):
    cell_no = np.shape(ini_c)[1]
    conc = np.zeros([int(time / timestep),2,cell_no], dtype = float)
    conc[0,:,:] = ini_c # conc is formatted: [time][compound][cell]
    for t in range(1,int(time / timestep)): # loops through t starting at 1 (x-axis of array)
        deltas = np.zeros([2,cell_no], dtype = float)
        for cell_index in range(cell_no): #loops through cells (y-axis of array)
            N = conc[t-1,1,cell_index]
            D = conc[t-1,0,cell_index]
            Dbar = (sum(conc[t-1,0,:]) - D) / (cell_no - 1) # mean of Delta in all neighbors
            dN = dN_dt(Dbar, N, a, k) * timestep
            dD = dD_dt(D, N, b, h) * timestep
            deltas[0,cell_index] = dD # change in Delta (z-axis)
            deltas[1,cell_index] = dN # change in Notch (z-axis)
        conc[t,:,:] = conc[t-1,:,:] + deltas # enters new conc in series at t
    return conc

# takes array from model() and creates a plot
def plotting(data):
    cell_no = np.shape(data)[2]
    t = np.array(range(np.shape(data)[0]))
    plt.figure()
    for d in range(cell_no):
        plt.plot(t, data[:,0,d], label = 'Delta cell {}'.format(d+1))
    for n in range(cell_no):
        plt.plot(t, data[:,1,n], label = 'Notch cell {}'.format(n+1))
    plt.xlabel('time')
    plt.ylabel('concentration')
    plt.legend()
    plt.show()

ini_c = np.array([[0.99,1],[1,1]])   # 2 cells
ini_c2   = np.array([[0.99,1,0.98],[1,1,1]])    # 3 cells
data = model(50, 0.2, ini_c, 0.01, 100, 2, 2)
print(data)
plotting(data)
